{"ast":null,"code":"var _jsxFileName = \"D:\\\\usercode\\\\FinGenius\\\\frontend\\\\src\\\\components\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Alert from \"./Alert\";\nimport Spinner from \"./Spinner\";\nimport Graph from \"./Graph\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [alert, setAlert] = useState(null);\n  const [graphData, setGraphData] = useState([]);\n  useEffect(() => {\n    const fetchInvoices = async () => {\n      try {\n        const response = await axios.get(\"/invoices\");\n        if (response.status === 200) {\n          const invoices = response.data;\n\n          // Process data to group by month\n          const groupedData = processInvoiceData(invoices);\n          setGraphData(groupedData);\n        } else {\n          setAlert({\n            type: \"danger\",\n            message: `Failed to retrieve invoice data: ${response.status} ${response.statusText}`\n          });\n        }\n        setIsLoading(false);\n      } catch (error) {\n        setAlert({\n          type: \"danger\",\n          message: `Error fetching invoice data: ${error.message}`\n        });\n        setIsLoading(false);\n      }\n    };\n    fetchInvoices();\n  }, []);\n  const processInvoiceData = invoices => {\n    // Get the last six months\n    const months = [];\n    for (let i = 5; i >= 0; i--) {\n      months.push(moment().subtract(i, \"months\").format(\"YYYY-MM\"));\n    }\n\n    // Initialize totals for each month\n    const salesData = months.reduce((acc, month) => {\n      acc[month] = 0;\n      return acc;\n    }, {});\n    const purchaseData = {\n      ...salesData\n    };\n\n    // Group invoices by month and type\n    invoices.forEach(invoice => {\n      const invoiceMonth = moment(invoice.invoice.invoiceDate).format(\"YYYY-MM\");\n      const type = invoice.invoice.type;\n      if (months.includes(invoiceMonth)) {\n        if (type === \"sales\") {\n          salesData[invoiceMonth] += parseFloat(invoice.invoice.invoiceTotal);\n        } else if (type === \"purchase\") {\n          purchaseData[invoiceMonth] += parseFloat(invoice.invoice.invoiceTotal);\n        }\n      }\n    });\n\n    // Convert data into array format for the graph\n    return months.map(month => ({\n      month: moment(month, \"YYYY-MM\").format(\"MMMM YYYY\"),\n      sales: salesData[month],\n      purchases: purchaseData[month]\n    }));\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [alert && /*#__PURE__*/_jsxDEV(Alert, {\n      type: alert.type,\n      message: alert.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow-lg border-0\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header bg-gradient-primary text-white\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-center mb-0\",\n          children: \"Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"text-center mb-4\",\n          children: \"Sales & Purchase Data (Last 6 Months)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Graph, {\n          graphData: graphData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"RuHeKez99BWTpPM8Nhoc4mzXwt8=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","axios","Alert","Spinner","Graph","moment","jsxDEV","_jsxDEV","Home","_s","isLoading","setIsLoading","alert","setAlert","graphData","setGraphData","fetchInvoices","response","get","status","invoices","data","groupedData","processInvoiceData","type","message","statusText","error","months","i","push","subtract","format","salesData","reduce","acc","month","purchaseData","forEach","invoice","invoiceMonth","invoiceDate","includes","parseFloat","invoiceTotal","map","sales","purchases","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["D:/usercode/FinGenius/frontend/src/components/Home.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Alert from \"./Alert\";\r\nimport Spinner from \"./Spinner\";\r\nimport Graph from \"./Graph\";\r\nimport moment from \"moment\";\r\n\r\nconst Home = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [alert, setAlert] = useState(null);\r\n  const [graphData, setGraphData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchInvoices = async () => {\r\n      try {\r\n        const response = await axios.get(\"/invoices\");\r\n        if (response.status === 200) {\r\n          const invoices = response.data;\r\n\r\n          // Process data to group by month\r\n          const groupedData = processInvoiceData(invoices);\r\n\r\n          setGraphData(groupedData);\r\n        } else {\r\n          setAlert({\r\n            type: \"danger\",\r\n            message: `Failed to retrieve invoice data: ${response.status} ${response.statusText}`,\r\n          });\r\n        }\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        setAlert({\r\n          type: \"danger\",\r\n          message: `Error fetching invoice data: ${error.message}`,\r\n        });\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInvoices();\r\n  }, []);\r\n\r\n  const processInvoiceData = (invoices) => {\r\n    // Get the last six months\r\n    const months = [];\r\n    for (let i = 5; i >= 0; i--) {\r\n      months.push(moment().subtract(i, \"months\").format(\"YYYY-MM\"));\r\n    }\r\n\r\n    // Initialize totals for each month\r\n    const salesData = months.reduce((acc, month) => {\r\n      acc[month] = 0;\r\n      return acc;\r\n    }, {});\r\n\r\n    const purchaseData = { ...salesData };\r\n\r\n    // Group invoices by month and type\r\n    invoices.forEach((invoice) => {\r\n      const invoiceMonth = moment(invoice.invoice.invoiceDate).format(\"YYYY-MM\");\r\n      const type = invoice.invoice.type;\r\n\r\n      if (months.includes(invoiceMonth)) {\r\n        if (type === \"sales\") {\r\n          salesData[invoiceMonth] += parseFloat(invoice.invoice.invoiceTotal);\r\n        } else if (type === \"purchase\") {\r\n          purchaseData[invoiceMonth] += parseFloat(invoice.invoice.invoiceTotal);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Convert data into array format for the graph\r\n    return months.map((month) => ({\r\n      month: moment(month, \"YYYY-MM\").format(\"MMMM YYYY\"),\r\n      sales: salesData[month],\r\n      purchases: purchaseData[month],\r\n    }));\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      {alert && <Alert type={alert.type} message={alert.message} />}\r\n      <div className=\"card shadow-lg border-0\">\r\n        <div className=\"card-header bg-gradient-primary text-white\">\r\n          <h3 className=\"text-center mb-0\">Dashboard</h3>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <h5 className=\"text-center mb-4\">Sales & Purchase Data (Last 6 Months)</h5>\r\n          <Graph graphData={graphData} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}