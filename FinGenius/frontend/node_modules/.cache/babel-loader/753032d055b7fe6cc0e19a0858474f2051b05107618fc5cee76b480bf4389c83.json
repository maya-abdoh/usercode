{"ast":null,"code":"var _jsxFileName = \"D:\\\\usercode\\\\FinGenius\\\\frontend\\\\src\\\\components\\\\AddInvoice.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport NavBar from \"./NavBar\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport Spinner from \"./Spinner\";\nimport Alert from \"./Alert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddInvoice = ({\n  invoiceType\n}) => {\n  _s();\n  const initialState = {\n    type: invoiceType,\n    invoiceDate: new Date().toISOString().split(\"T\")[0],\n    dueDate: new Date().toISOString().split(\"T\")[0],\n    invoiceNo: \"\",\n    partnerId: \"\",\n    creditTerm: 0,\n    reference: \"\",\n    invoiceTotal: 0,\n    invoiceItems: []\n  };\n  const [invoiceData, setInvoiceData] = useState(initialState);\n  let {\n    dueDate,\n    invoiceNo,\n    partnerId,\n    creditTerm,\n    reference,\n    invoiceItems\n  } = invoiceData;\n  const navigate = useNavigate();\n\n  // State variables to manage the alert\n  const [alertType, setAlertType] = useState(null);\n  const [alertMessage, setAlertMessage] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true); // Add a loading state\n\n  const [partners, setPartners] = useState([]);\n  const [products, setProducts] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [invoiceNumberResponse, partnersResponse, productsResponse] = await Promise.all([axios.get(`/invoices?type=${invoiceType}`), axios.get(`/partners?type=${invoiceType === \"sales\" ? \"customer\" : \"vendor\"}&status=Active`), axios.get(`/products?status=Active`)]);\n\n        // Handle the response for invoice numbers\n        if (invoiceNumberResponse.status === 200) {\n          const totalInvoices = invoiceNumberResponse.data.length;\n          const nextInvoiceNumber = `${invoiceType === \"sales\" ? \"SI\" : \"PI\"}-${String(totalInvoices + 1).padStart(4, \"0\")}`;\n          setInvoiceData(prevData => ({\n            ...prevData,\n            invoiceNo: nextInvoiceNumber\n          }));\n        } else {\n          setAlertType(\"danger\");\n          setAlertMessage(`Failed to generate Invoice No.`);\n        }\n\n        // Handle the response for partners\n        if (partnersResponse.status === 200) {\n          setPartners(partnersResponse.data);\n        } else {\n          setAlertType(\"danger\");\n          setAlertMessage(`${invoiceType === \"sales\" ? \"Customers\" : \"Vendors\"} not found.`);\n        }\n\n        // Handle the response for products\n        if (productsResponse.status === 200) {\n          setProducts(productsResponse.data);\n        } else {\n          setAlertType(\"danger\");\n          setAlertMessage(`Failed to retrieve products: ${productsResponse.status} ${productsResponse.statusText}`);\n        }\n        setIsLoading(false); // Set loading to false after all requests are completed\n      } catch (error) {\n        setAlertType(\"danger\");\n        setAlertMessage(`Failed to fetch data: ${error.message}`);\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [invoiceType]);\n  const [page, setPage] = useState(1);\n\n  // Define local state variables for productId and quantity\n  const [productId, setProductId] = useState(\"\");\n  const [quantity, setQuantity] = useState(0);\n  const addProduct = () => {\n    if (productId && quantity) {\n      // Find the selected product by its name in the products array\n      const selectedProduct = products.find(product => product._id === productId);\n      if (selectedProduct) {\n        const valueOfSupplies = quantity * selectedProduct.rate;\n        const salesTax = valueOfSupplies * selectedProduct.salesTax / 100;\n        const netAmount = valueOfSupplies + salesTax;\n        const newItem = {\n          productName: selectedProduct.name,\n          quantity,\n          rate: selectedProduct.rate,\n          valueOfSupplies: valueOfSupplies.toString(),\n          salesTax: salesTax.toString(),\n          netAmount: netAmount.toString()\n        };\n\n        // Update invoiceData.items with the new item\n        setInvoiceData(prevData => ({\n          ...prevData,\n          invoiceTotal: prevData.invoiceTotal + netAmount,\n          invoiceItems: [...prevData.invoiceItems, newItem]\n        }));\n\n        // Reset productId and quantity\n        setProductId(\"\");\n        setQuantity(0);\n      } else {\n        // Handle the case when the selected product is not found\n        alert(\"Selected product not found.\");\n      }\n    }\n  };\n  const handleRemoveInvoiceItem = itemToRemove => {\n    // Filter out the item to be removed\n    const updatedInvoiceItems = invoiceItems.filter(item => item !== itemToRemove);\n\n    // Calculate the new invoiceTotal by summing up the netAmount of the remaining items\n    const newInvoiceTotal = updatedInvoiceItems.reduce((total, item) => total + parseFloat(item.netAmount), 0);\n\n    // Update the state with the filtered invoiceItems and new invoiceTotal\n    setInvoiceData(prevData => ({\n      ...prevData,\n      invoiceTotal: newInvoiceTotal,\n      invoiceItems: updatedInvoiceItems\n    }));\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInvoiceData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const addDaysToDate = daysToAdd => {\n    // Create a new Date object representing the current date\n    const currentDate = new Date();\n    const invoiceDate = currentDate.toISOString().split(\"T\")[0];\n\n    // Calculate the new date by adding days\n    const newDate = new Date(currentDate.getTime() + daysToAdd * 24 * 60 * 60 * 1000);\n    const dueDate = newDate.toISOString().split(\"T\")[0];\n\n    // Return an object or an array with both dates\n    return {\n      invoiceDate,\n      dueDate\n    };\n  };\n  const handleCreditTermChange = e => {\n    const newCreditTerm = e.target.value === \"\" ? null : parseInt(e.target.value);\n    const {\n      invoiceDate,\n      dueDate\n    } = addDaysToDate(newCreditTerm || 0);\n    setInvoiceData(prevData => ({\n      ...prevData,\n      creditTerm: newCreditTerm,\n      invoiceDate,\n      dueDate\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(\"/invoices\", invoiceData);\n      if (response.status === 201) {\n        setAlertType(\"success\");\n        setAlertMessage(response.data);\n        setInvoiceData(initialState);\n        setPage(1);\n      } else {\n        setAlertType(\"danger\");\n        setAlertMessage(`Failed to add ${invoiceType} invoice: ${response.status} ${response.statusText}`);\n      }\n    } catch (error) {\n      setAlertType(\"danger\");\n      setAlertMessage(`Failed to add ${invoiceType} invoice: ${error.message}`);\n    }\n  };\n  const handleCancel = () => {\n    // Redirect to the sales/purchase invoices page on cancel\n    navigate(`/${invoiceType}invoices`);\n  };\n  const handleNavigation = () => {\n    if (page === 1) {\n      setPage(2);\n    } else {\n      setPage(1);\n    }\n  };\n  const progressBarWidth = (page === 1 ? 50 : 100) + \"%\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mt-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n};\n_s(AddInvoice, \"7J+22vMhs+3VUptkWqxxiqPd8mY=\", false, function () {\n  return [useNavigate];\n});\n_c = AddInvoice;\nexport default AddInvoice;\nvar _c;\n$RefreshReg$(_c, \"AddInvoice\");","map":{"version":3,"names":["React","useState","useEffect","NavBar","axios","useNavigate","Spinner","Alert","jsxDEV","_jsxDEV","AddInvoice","invoiceType","_s","initialState","type","invoiceDate","Date","toISOString","split","dueDate","invoiceNo","partnerId","creditTerm","reference","invoiceTotal","invoiceItems","invoiceData","setInvoiceData","navigate","alertType","setAlertType","alertMessage","setAlertMessage","isLoading","setIsLoading","partners","setPartners","products","setProducts","fetchData","invoiceNumberResponse","partnersResponse","productsResponse","Promise","all","get","status","totalInvoices","data","length","nextInvoiceNumber","String","padStart","prevData","statusText","error","message","page","setPage","productId","setProductId","quantity","setQuantity","addProduct","selectedProduct","find","product","_id","valueOfSupplies","rate","salesTax","netAmount","newItem","productName","name","toString","alert","handleRemoveInvoiceItem","itemToRemove","updatedInvoiceItems","filter","item","newInvoiceTotal","reduce","total","parseFloat","handleChange","e","value","target","addDaysToDate","daysToAdd","currentDate","newDate","getTime","handleCreditTermChange","newCreditTerm","parseInt","handleSubmit","preventDefault","response","post","handleCancel","handleNavigation","progressBarWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["D:/usercode/FinGenius/frontend/src/components/AddInvoice.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport NavBar from \"./NavBar\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Spinner from \"./Spinner\";\r\nimport Alert from \"./Alert\";\r\n\r\nconst AddInvoice = ({ invoiceType }) => {\r\n  const initialState = {\r\n    type: invoiceType,\r\n    invoiceDate: new Date().toISOString().split(\"T\")[0],\r\n    dueDate: new Date().toISOString().split(\"T\")[0],\r\n    invoiceNo: \"\",\r\n    partnerId: \"\",\r\n    creditTerm: 0,\r\n    reference: \"\",\r\n    invoiceTotal: 0,\r\n    invoiceItems: [],\r\n  };\r\n\r\n  const [invoiceData, setInvoiceData] = useState(initialState);\r\n\r\n  let { dueDate, invoiceNo, partnerId, creditTerm, reference, invoiceItems } =\r\n    invoiceData;\r\n\r\n    const navigate = useNavigate();\r\n\r\n    // State variables to manage the alert\r\n    const [alertType, setAlertType] = useState(null);\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    \r\n    const [isLoading, setIsLoading] = useState(true); // Add a loading state\r\n    \r\n    const [partners, setPartners] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n    \r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        try {\r\n          const [invoiceNumberResponse, partnersResponse, productsResponse] =\r\n            await Promise.all([\r\n              axios.get(`/invoices?type=${invoiceType}`),\r\n              axios.get(\r\n                `/partners?type=${\r\n                  invoiceType === \"sales\" ? \"customer\" : \"vendor\"\r\n                }&status=Active`\r\n              ),\r\n              axios.get(`/products?status=Active`),\r\n            ]);\r\n    \r\n          // Handle the response for invoice numbers\r\n          if (invoiceNumberResponse.status === 200) {\r\n            const totalInvoices = invoiceNumberResponse.data.length;\r\n            const nextInvoiceNumber = `${\r\n              invoiceType === \"sales\" ? \"SI\" : \"PI\"\r\n            }-${String(totalInvoices + 1).padStart(4, \"0\")}`;\r\n            setInvoiceData((prevData) => ({\r\n              ...prevData,\r\n              invoiceNo: nextInvoiceNumber,\r\n            }));\r\n          } else {\r\n            setAlertType(\"danger\");\r\n            setAlertMessage(`Failed to generate Invoice No.`);\r\n          }\r\n    \r\n          // Handle the response for partners\r\n          if (partnersResponse.status === 200) {\r\n            setPartners(partnersResponse.data);\r\n          } else {\r\n            setAlertType(\"danger\");\r\n            setAlertMessage(\r\n              `${invoiceType === \"sales\" ? \"Customers\" : \"Vendors\"} not found.`\r\n            );\r\n          }\r\n    \r\n          // Handle the response for products\r\n          if (productsResponse.status === 200) {\r\n            setProducts(productsResponse.data);\r\n          } else {\r\n            setAlertType(\"danger\");\r\n            setAlertMessage(\r\n              `Failed to retrieve products: ${productsResponse.status} ${productsResponse.statusText}`\r\n            );\r\n          }\r\n    \r\n          setIsLoading(false); // Set loading to false after all requests are completed\r\n        } catch (error) {\r\n          setAlertType(\"danger\");\r\n          setAlertMessage(`Failed to fetch data: ${error.message}`);\r\n          setIsLoading(false);\r\n        }\r\n      };\r\n    \r\n      fetchData();\r\n    }, [invoiceType]);\r\n    \r\n    const [page, setPage] = useState(1);\r\n    \r\n    // Define local state variables for productId and quantity\r\n    const [productId, setProductId] = useState(\"\");\r\n    const [quantity, setQuantity] = useState(0);\r\n    \r\n    const addProduct = () => {\r\n      if (productId && quantity) {\r\n        // Find the selected product by its name in the products array\r\n        const selectedProduct = products.find(\r\n          (product) => product._id === productId\r\n        );\r\n    \r\n        if (selectedProduct) {\r\n          const valueOfSupplies = quantity * selectedProduct.rate;\r\n          const salesTax = (valueOfSupplies * selectedProduct.salesTax) / 100;\r\n          const netAmount = valueOfSupplies + salesTax;\r\n    \r\n          const newItem = {\r\n            productName: selectedProduct.name,\r\n            quantity,\r\n            rate: selectedProduct.rate,\r\n            valueOfSupplies: valueOfSupplies.toString(),\r\n            salesTax: salesTax.toString(),\r\n            netAmount: netAmount.toString(),\r\n          };\r\n    \r\n          // Update invoiceData.items with the new item\r\n          setInvoiceData((prevData) => ({\r\n            ...prevData,\r\n            invoiceTotal: prevData.invoiceTotal + netAmount,\r\n            invoiceItems: [...prevData.invoiceItems, newItem],\r\n          }));\r\n    \r\n          // Reset productId and quantity\r\n          setProductId(\"\");\r\n          setQuantity(0);\r\n        } else {\r\n          // Handle the case when the selected product is not found\r\n          alert(\"Selected product not found.\");\r\n        }\r\n      }\r\n    };\r\n    \r\n    const handleRemoveInvoiceItem = (itemToRemove) => {\r\n      // Filter out the item to be removed\r\n      const updatedInvoiceItems = invoiceItems.filter(\r\n        (item) => item !== itemToRemove\r\n      );\r\n    \r\n      // Calculate the new invoiceTotal by summing up the netAmount of the remaining items\r\n      const newInvoiceTotal = updatedInvoiceItems.reduce(\r\n        (total, item) => total + parseFloat(item.netAmount),\r\n        0\r\n      );\r\n    \r\n      // Update the state with the filtered invoiceItems and new invoiceTotal\r\n      setInvoiceData((prevData) => ({\r\n        ...prevData,\r\n        invoiceTotal: newInvoiceTotal,\r\n        invoiceItems: updatedInvoiceItems,\r\n      }));\r\n    };\r\n    \r\n    const handleChange = (e) => {\r\n      const { name, value } = e.target;\r\n      setInvoiceData((prevData) => ({ ...prevData, [name]: value }));\r\n    };\r\n    \r\n    const addDaysToDate = (daysToAdd) => {\r\n      // Create a new Date object representing the current date\r\n      const currentDate = new Date();\r\n    \r\n      const invoiceDate = currentDate.toISOString().split(\"T\")[0];\r\n    \r\n      // Calculate the new date by adding days\r\n      const newDate = new Date(\r\n        currentDate.getTime() + daysToAdd * 24 * 60 * 60 * 1000\r\n      );\r\n    \r\n      const dueDate = newDate.toISOString().split(\"T\")[0];\r\n    \r\n      // Return an object or an array with both dates\r\n      return { invoiceDate, dueDate };\r\n    };\r\n    \r\n    const handleCreditTermChange = (e) => {\r\n      const newCreditTerm =\r\n        e.target.value === \"\" ? null : parseInt(e.target.value);\r\n      const { invoiceDate, dueDate } = addDaysToDate(newCreditTerm || 0);\r\n      setInvoiceData((prevData) => ({\r\n        ...prevData,\r\n        creditTerm: newCreditTerm,\r\n        invoiceDate,\r\n        dueDate,\r\n      }));\r\n    };\r\n    \r\n    const handleSubmit = async (e) => {\r\n      e.preventDefault();\r\n    \r\n      try {\r\n        const response = await axios.post(\"/invoices\", invoiceData);\r\n        if (response.status === 201) {\r\n          setAlertType(\"success\");\r\n          setAlertMessage(response.data);\r\n          setInvoiceData(initialState);\r\n          setPage(1);\r\n        } else {\r\n          setAlertType(\"danger\");\r\n          setAlertMessage(\r\n            `Failed to add ${invoiceType} invoice: ${response.status} ${response.statusText}`\r\n          );\r\n        }\r\n      } catch (error) {\r\n        setAlertType(\"danger\");\r\n        setAlertMessage(`Failed to add ${invoiceType} invoice: ${error.message}`);\r\n      }\r\n    };\r\n    \r\n    const handleCancel = () => {\r\n      // Redirect to the sales/purchase invoices page on cancel\r\n      navigate(`/${invoiceType}invoices`);\r\n    };\r\n    \r\n    const handleNavigation = () => {\r\n      if (page === 1) {\r\n        setPage(2);\r\n      } else {\r\n        setPage(1);\r\n      }\r\n    };\r\n    \r\n    const progressBarWidth = (page === 1 ? 50 : 100) + \"%\";  \r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <div className=\"container mt-4\">\r\n        {/* TODO: Write your JSX code here */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddInvoice;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}